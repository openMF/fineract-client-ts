/**
 * Apache Fineract REST API
 *
 * Contact: dev@fineract.apache.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { Fund } from './fund';
import { MonetaryCurrency } from './monetaryCurrency';
import { LoanProductGuaranteeDetails } from './loanProductGuaranteeDetails';
import { Rate } from './rate';
import { ExternalId } from './externalId';
import { LoanProductPaymentAllocationRule } from './loanProductPaymentAllocationRule';
import { Charge } from './charge';
import { LoanProductConfigurableAttributes } from './loanProductConfigurableAttributes';
import { DelinquencyBucket } from './delinquencyBucket';
import { LoanProductTrancheDetails } from './loanProductTrancheDetails';
import { LoanProductMinMaxConstraints } from './loanProductMinMaxConstraints';
import { Money } from './money';
import { LoanProductBorrowerCycleVariations } from './loanProductBorrowerCycleVariations';
import { LoanProductInterestRecalculationDetails } from './loanProductInterestRecalculationDetails';
import { LoanProductRelatedDetail } from './loanProductRelatedDetail';
import { LoanProductCreditAllocationRule } from './loanProductCreditAllocationRule';
import { LoanProductFloatingRates } from './loanProductFloatingRates';
import { LoanProductVariableInstallmentConfig } from './loanProductVariableInstallmentConfig';


export interface LoanProduct { 
    accountMovesOutOfNPAOnlyOnArrearsCompletion?: boolean;
    accountingDisabled?: boolean;
    accountingRule?: LoanProduct.AccountingRuleEnum;
    allowApprovedDisbursedAmountsOverApplied?: boolean;
    allowVariabeInstallments?: boolean;
    arrearsBasedOnOriginalSchedule?: boolean;
    borrowerCycleVariations?: Set<LoanProductBorrowerCycleVariations>;
    canDefineInstallmentAmount?: boolean;
    canUseForTopup?: boolean;
    cashBasedAccountingEnabled?: boolean;
    charges?: Array<Charge>;
    closeDate?: string;
    creditAllocationRules?: Array<LoanProductCreditAllocationRule>;
    currency?: MonetaryCurrency;
    delinquencyBucket?: DelinquencyBucket;
    description?: string;
    disallowExpectedDisbursements?: boolean;
    dueDaysForRepaymentEvent?: number;
    enableInstallmentLevelDelinquency?: boolean;
    equalAmortization?: boolean;
    externalId?: ExternalId;
    fixedPrincipalPercentagePerInstallment?: number;
    floatingRates?: LoanProductFloatingRates;
    fund?: Fund;
    holdGuaranteeFunds?: boolean;
    id?: number;
    includeInBorrowerCycle?: boolean;
    interestPeriodFrequencyType?: LoanProduct.InterestPeriodFrequencyTypeEnum;
    interestRecalculationEnabled?: boolean;
    linkedToFloatingInterestRate?: boolean;
    loanConfigurableAttributes?: LoanProductConfigurableAttributes;
    loanProductGuaranteeDetails?: LoanProductGuaranteeDetails;
    loanProductMinMaxConstraints?: LoanProductMinMaxConstraints;
    loanProductRelatedDetail?: LoanProductRelatedDetail;
    loanProductTrancheDetails?: LoanProductTrancheDetails;
    maxNominalInterestRatePerPeriod?: number;
    maxNumberOfRepayments?: number;
    maxPrincipalAmount?: Money;
    minNominalInterestRatePerPeriod?: number;
    minNumberOfRepayments?: number;
    minPrincipalAmount?: Money;
    minimumDaysBetweenDisbursalAndFirstRepayment?: number;
    multiDisburseLoan?: boolean;
    name?: string;
    'new'?: boolean;
    nominalInterestRatePerPeriod?: number;
    numberOfRepayments?: number;
    overAppliedCalculationType?: string;
    overAppliedNumber?: number;
    overDueDaysForRepaymentEvent?: number;
    overdueDaysForNPA?: number;
    paymentAllocationRules?: Array<LoanProductPaymentAllocationRule>;
    periodicAccrualAccountingEnabled?: boolean;
    principalAmount?: Money;
    principalThresholdForLastInstallment?: number;
    productInterestRecalculationDetails?: LoanProductInterestRecalculationDetails;
    rates?: Array<Rate>;
    repaymentStartDateType?: LoanProduct.RepaymentStartDateTypeEnum;
    shortName?: string;
    startDate?: string;
    syncExpectedWithDisbursementDate?: boolean;
    transactionProcessingStrategyCode?: string;
    transactionProcessingStrategyName?: string;
    upfrontAccrualAccountingEnabled?: boolean;
    useBorrowerCycle?: boolean;
    variableInstallmentConfig?: LoanProductVariableInstallmentConfig;
}
export namespace LoanProduct {
    export const AccountingRuleEnum = {
        None: 'NONE',
        CashBased: 'CASH BASED',
        AccrualPeriodic: 'ACCRUAL PERIODIC',
        AccrualUpfront: 'ACCRUAL UPFRONT'
    } as const;
    export type AccountingRuleEnum = typeof AccountingRuleEnum[keyof typeof AccountingRuleEnum];
    export const InterestPeriodFrequencyTypeEnum = {
        Days: 'DAYS',
        Weeks: 'WEEKS',
        Months: 'MONTHS',
        Years: 'YEARS',
        WholeTerm: 'WHOLE_TERM',
        Invalid: 'INVALID'
    } as const;
    export type InterestPeriodFrequencyTypeEnum = typeof InterestPeriodFrequencyTypeEnum[keyof typeof InterestPeriodFrequencyTypeEnum];
    export const RepaymentStartDateTypeEnum = {
        Invalid: 'INVALID',
        DisbursementDate: 'DISBURSEMENT_DATE',
        SubmittedOnDate: 'SUBMITTED_ON_DATE'
    } as const;
    export type RepaymentStartDateTypeEnum = typeof RepaymentStartDateTypeEnum[keyof typeof RepaymentStartDateTypeEnum];
}


