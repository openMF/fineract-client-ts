/**
 * Apache Fineract REST API
 *
 * Contact: dev@fineract.apache.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { GetLoanProductsChargeOffReasonOptions } from './getLoanProductsChargeOffReasonOptions';
import { GetLoanProductsInterestRateFrequencyType } from './getLoanProductsInterestRateFrequencyType';
import { GetLoanPaymentChannelToFundSourceMappings } from './getLoanPaymentChannelToFundSourceMappings';
import { GetLoanProductsRepaymentStartDateType } from './getLoanProductsRepaymentStartDateType';
import { StringEnumOptionData } from './stringEnumOptionData';
import { GetLoanProductsInterestTemplateType } from './getLoanProductsInterestTemplateType';
import { AdvancedPaymentData } from './advancedPaymentData';
import { GetLoanFeeToIncomeAccountMappings } from './getLoanFeeToIncomeAccountMappings';
import { EnumOptionData } from './enumOptionData';
import { GetLoanProductsAmortizationType } from './getLoanProductsAmortizationType';
import { GetLoanProductsCurrency } from './getLoanProductsCurrency';
import { GetLoanAccountingMappings } from './getLoanAccountingMappings';
import { GetLoanProductsDaysInYearType } from './getLoanProductsDaysInYearType';
import { DelinquencyBucketData } from './delinquencyBucketData';
import { GetLoanProductsAccountingRule } from './getLoanProductsAccountingRule';
import { GetLoanProductsInterestRecalculationData } from './getLoanProductsInterestRecalculationData';
import { GetLoanProductsRepaymentFrequencyType } from './getLoanProductsRepaymentFrequencyType';
import { CreditAllocationData } from './creditAllocationData';
import { GetLoanProductsDaysInMonthType } from './getLoanProductsDaysInMonthType';
import { GetChargeOffReasonToExpenseAccountMappings } from './getChargeOffReasonToExpenseAccountMappings';
import { GetLoansProductsInterestCalculationPeriodType } from './getLoansProductsInterestCalculationPeriodType';
import { GetLoanProductsPrincipalVariationsForBorrowerCycle } from './getLoanProductsPrincipalVariationsForBorrowerCycle';


/**
 * GetLoanProductsProductIdResponse
 */
export interface GetLoanProductsProductIdResponse { 
    accountingMappings?: GetLoanAccountingMappings;
    accountingRule?: GetLoanProductsAccountingRule;
    allowApprovedDisbursedAmountsOverApplied?: boolean;
    allowPartialPeriodInterestCalculation?: boolean;
    allowVariableInstallments?: boolean;
    amortizationType?: GetLoanProductsAmortizationType;
    annualInterestRate?: number;
    canDefineInstallmentAmount?: boolean;
    canUseForTopup?: boolean;
    capitalizedIncomeCalculationType?: StringEnumOptionData;
    capitalizedIncomeCalculationTypeOptions?: Array<StringEnumOptionData>;
    capitalizedIncomeStrategy?: StringEnumOptionData;
    capitalizedIncomeStrategyOptions?: Array<StringEnumOptionData>;
    capitalizedIncomeType?: StringEnumOptionData;
    capitalizedIncomeTypeOptions?: Array<StringEnumOptionData>;
    chargeOffBehaviour?: StringEnumOptionData;
    chargeOffReasonOptions?: Array<GetLoanProductsChargeOffReasonOptions>;
    chargeOffReasonToExpenseAccountMappings?: Array<GetChargeOffReasonToExpenseAccountMappings>;
    charges?: Array<number>;
    creditAllocation?: Array<CreditAllocationData>;
    currency?: GetLoanProductsCurrency;
    daysInMonthType?: GetLoanProductsDaysInMonthType;
    daysInYearCustomStrategy?: StringEnumOptionData;
    daysInYearType?: GetLoanProductsDaysInYearType;
    delinquencyBucket?: DelinquencyBucketData;
    delinquencyBucketOptions?: Array<DelinquencyBucketData>;
    description?: string;
    disallowExpectedDisbursements?: boolean;
    disbursedAmountPercentageForDownPayment?: number;
    dueDaysForRepaymentEvent?: number;
    enableAccrualActivityPosting?: boolean;
    enableAutoRepaymentForDownPayment?: boolean;
    enableDownPayment?: boolean;
    enableIncomeCapitalization?: boolean;
    enableInstallmentLevelDelinquency?: boolean;
    feeToIncomeAccountMappings?: Set<GetLoanFeeToIncomeAccountMappings>;
    fixedLength?: number;
    fixedPrincipalPercentagePerInstallment?: number;
    id?: number;
    inArrearsTolerance?: number;
    includeInBorrowerCycle?: boolean;
    interestCalculationPeriodType?: GetLoansProductsInterestCalculationPeriodType;
    interestRateFrequencyType?: GetLoanProductsInterestRateFrequencyType;
    interestRatePerPeriod?: number;
    interestRateVariationsForBorrowerCycle?: Array<number>;
    interestRecalculationData?: GetLoanProductsInterestRecalculationData;
    interestRecognitionOnDisbursementDate?: boolean;
    interestType?: GetLoanProductsInterestTemplateType;
    isFloatingInterestRateCalculationAllowed?: boolean;
    isInterestRecalculationEnabled?: boolean;
    isLinkedToFloatingInterestRates?: boolean;
    isRatesEnabled?: boolean;
    loanScheduleProcessingType?: EnumOptionData;
    loanScheduleType?: EnumOptionData;
    maxInterestRatePerPeriod?: number;
    maxNumberOfRepayments?: number;
    maxPrincipal?: number;
    maxTrancheCount?: number;
    maximumGap?: number;
    minInterestRatePerPeriod?: number;
    minNumberOfRepayments?: number;
    minPrincipal?: number;
    minimumGap?: number;
    multiDisburseLoan?: boolean;
    name?: string;
    numberOfRepaymentVariationsForBorrowerCycle?: Array<number>;
    numberOfRepayments?: number;
    outstandingLoanBalance?: number;
    overAppliedCalculationType?: string;
    overDueDaysForRepaymentEvent?: number;
    overdueDaysForNPA?: number;
    paymentAllocation?: Array<AdvancedPaymentData>;
    paymentChannelToFundSourceMappings?: Set<GetLoanPaymentChannelToFundSourceMappings>;
    principal?: number;
    principalThresholdForLastInstalment?: number;
    productsPrincipalVariationsForBorrowerCycle?: Set<GetLoanProductsPrincipalVariationsForBorrowerCycle>;
    repaymentEvery?: number;
    repaymentFrequencyType?: GetLoanProductsRepaymentFrequencyType;
    repaymentStartDateType?: GetLoanProductsRepaymentStartDateType;
    shortName?: string;
    status?: string;
    supportedInterestRefundTypes?: Array<StringEnumOptionData>;
    transactionProcessingStrategyCode?: string;
    transactionProcessingStrategyName?: string;
    useBorrowerCycle?: boolean;
}

