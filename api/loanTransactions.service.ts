/**
 * Apache Fineract REST API
 *
 * Contact: dev@fineract.apache.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext 
        }       from '@angular/common/http';
import { CustomHttpParameterCodec }                          from '../encoder';
import { Observable }                                        from 'rxjs';

// @ts-ignore
import { GetLoansLoanIdTransactionsResponse } from '../model/getLoansLoanIdTransactionsResponse';
// @ts-ignore
import { GetLoansLoanIdTransactionsTemplateResponse } from '../model/getLoansLoanIdTransactionsTemplateResponse';
// @ts-ignore
import { GetLoansLoanIdTransactionsTransactionIdResponse } from '../model/getLoansLoanIdTransactionsTransactionIdResponse';
// @ts-ignore
import { PostLoansLoanIdTransactionsRequest } from '../model/postLoansLoanIdTransactionsRequest';
// @ts-ignore
import { PostLoansLoanIdTransactionsResponse } from '../model/postLoansLoanIdTransactionsResponse';
// @ts-ignore
import { PostLoansLoanIdTransactionsTransactionIdRequest } from '../model/postLoansLoanIdTransactionsTransactionIdRequest';
// @ts-ignore
import { PutChargeTransactionChangesRequest } from '../model/putChargeTransactionChangesRequest';
// @ts-ignore
import { PutChargeTransactionChangesResponse } from '../model/putChargeTransactionChangesResponse';
// @ts-ignore
import { TransactionType } from '../model/transactionType';

// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';
import { BaseService } from '../api.base.service';


export interface AdjustLoanTransactionRequestParams {
    /** loanId */
    loanId: number;
    /** transactionId */
    transactionId: number;
    postLoansLoanIdTransactionsTransactionIdRequest: PostLoansLoanIdTransactionsTransactionIdRequest;
    /** command */
    command?: string;
}

export interface AdjustLoanTransaction1RequestParams {
    /** loanId */
    loanId: number;
    /** externalTransactionId */
    externalTransactionId: string;
    postLoansLoanIdTransactionsTransactionIdRequest: PostLoansLoanIdTransactionsTransactionIdRequest;
    /** command */
    command?: string;
}

export interface AdjustLoanTransaction2RequestParams {
    /** loanExternalId */
    loanExternalId: string;
    /** transactionId */
    transactionId: number;
    postLoansLoanIdTransactionsTransactionIdRequest: PostLoansLoanIdTransactionsTransactionIdRequest;
    /** command */
    command?: string;
}

export interface AdjustLoanTransaction3RequestParams {
    /** loanExternalId */
    loanExternalId: string;
    /** externalTransactionId */
    externalTransactionId: string;
    postLoansLoanIdTransactionsTransactionIdRequest: PostLoansLoanIdTransactionsTransactionIdRequest;
    /** command */
    command?: string;
}

export interface ExecuteLoanTransactionRequestParams {
    /** loanId */
    loanId: number;
    postLoansLoanIdTransactionsRequest: PostLoansLoanIdTransactionsRequest;
    /** command */
    command?: string;
}

export interface ExecuteLoanTransaction1RequestParams {
    /** loanExternalId */
    loanExternalId: string;
    postLoansLoanIdTransactionsRequest: PostLoansLoanIdTransactionsRequest;
    /** command */
    command?: string;
}

export interface RetrieveTransactionRequestParams {
    /** loanId */
    loanId: number;
    /** transactionId */
    transactionId: number;
    /** Optional Loan Transaction attribute list to be in the response */
    fields?: string;
}

export interface RetrieveTransactionByLoanExternalIdAndTransactionExternalIdRequestParams {
    /** loanExternalId */
    loanExternalId: string;
    /** externalTransactionId */
    externalTransactionId: string;
    /** Optional Loan Transaction attribute list to be in the response */
    fields?: string;
}

export interface RetrieveTransactionByLoanExternalIdAndTransactionIdRequestParams {
    /** loanExternalId */
    loanExternalId: string;
    /** transactionId */
    transactionId: number;
    /** Optional Loan Transaction attribute list to be in the response */
    fields?: string;
}

export interface RetrieveTransactionByTransactionExternalIdRequestParams {
    /** loanId */
    loanId: number;
    /** externalTransactionId */
    externalTransactionId: string;
    /** Optional Loan Transaction attribute list to be in the response */
    fields?: string;
}

export interface RetrieveTransactionTemplateRequestParams {
    /** loanId */
    loanId: number;
    /** command */
    command?: string;
    /** dateFormat */
    dateFormat?: string;
    /** transactionDate */
    transactionDate?: object;
    /** locale */
    locale?: string;
    /** transactionId */
    transactionId?: number;
}

export interface RetrieveTransactionTemplate1RequestParams {
    /** loanExternalId */
    loanExternalId: string;
    /** command */
    command?: string;
    /** dateFormat */
    dateFormat?: string;
    /** transactionDate */
    transactionDate?: object;
    /** locale */
    locale?: string;
    /** transactionId */
    transactionId?: number;
}

export interface RetrieveTransactionsByExternalLoanIdRequestParams {
    /** loanId */
    loanExternalId: string;
    /** excludedTypes */
    excludedTypes?: Array<TransactionType>;
    /** page */
    page?: number;
    /** size */
    size?: number;
    /** sort */
    sort?: string;
}

export interface RetrieveTransactionsByLoanIdRequestParams {
    /** loanId */
    loanId: number;
    /** excludedTypes */
    excludedTypes?: Array<TransactionType>;
    /** page */
    page?: number;
    /** size */
    size?: number;
    /** sort */
    sort?: string;
}

export interface UndoWaiveChargeRequestParams {
    /** loanId */
    loanId: number;
    /** transactionId */
    transactionId: number;
    putChargeTransactionChangesRequest: PutChargeTransactionChangesRequest;
}

export interface UndoWaiveCharge1RequestParams {
    /** loanId */
    loanId: number;
    /** transactionExternalId */
    transactionExternalId: string;
    putChargeTransactionChangesRequest: PutChargeTransactionChangesRequest;
}

export interface UndoWaiveCharge2RequestParams {
    /** loanExternalId */
    loanExternalId: string;
    /** transactionId */
    transactionId: number;
    putChargeTransactionChangesRequest: PutChargeTransactionChangesRequest;
}

export interface UndoWaiveCharge3RequestParams {
    /** loanExternalId */
    loanExternalId: string;
    /** transactionExternalId */
    transactionExternalId: string;
    putChargeTransactionChangesRequest: PutChargeTransactionChangesRequest;
}


@Injectable({
  providedIn: 'root'
})
export class LoanTransactionsService extends BaseService {

    constructor(protected httpClient: HttpClient, @Optional() @Inject(BASE_PATH) basePath: string|string[], @Optional() configuration?: Configuration) {
        super(basePath, configuration);
    }

    /**
     * Adjust a Transaction
     * Note: there is no need to specify command&#x3D;{transactionType} parameter.  Mandatory Fields: transactionDate, transactionAmount
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public adjustLoanTransaction(requestParameters: AdjustLoanTransactionRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<PostLoansLoanIdTransactionsResponse>;
    public adjustLoanTransaction(requestParameters: AdjustLoanTransactionRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<PostLoansLoanIdTransactionsResponse>>;
    public adjustLoanTransaction(requestParameters: AdjustLoanTransactionRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<PostLoansLoanIdTransactionsResponse>>;
    public adjustLoanTransaction(requestParameters: AdjustLoanTransactionRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const loanId = requestParameters?.loanId;
        if (loanId === null || loanId === undefined) {
            throw new Error('Required parameter loanId was null or undefined when calling adjustLoanTransaction.');
        }
        const transactionId = requestParameters?.transactionId;
        if (transactionId === null || transactionId === undefined) {
            throw new Error('Required parameter transactionId was null or undefined when calling adjustLoanTransaction.');
        }
        const postLoansLoanIdTransactionsTransactionIdRequest = requestParameters?.postLoansLoanIdTransactionsTransactionIdRequest;
        if (postLoansLoanIdTransactionsTransactionIdRequest === null || postLoansLoanIdTransactionsTransactionIdRequest === undefined) {
            throw new Error('Required parameter postLoansLoanIdTransactionsTransactionIdRequest was null or undefined when calling adjustLoanTransaction.');
        }
        const command = requestParameters?.command;

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>command, 'command');

        let localVarHeaders = this.defaultHeaders;

        // authentication (basicAuth) required
        localVarHeaders = this.configuration.addCredentialToHeaders('basicAuth', 'Authorization', localVarHeaders, 'Basic ');

        // authentication (tenantid) required
        localVarHeaders = this.configuration.addCredentialToHeaders('tenantid', 'fineract-platform-tenantid', localVarHeaders);

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/v1/loans/${this.configuration.encodeParam({name: "loanId", value: loanId, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: "int64"})}/transactions/${this.configuration.encodeParam({name: "transactionId", value: transactionId, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: "int64"})}`;
        const { basePath, withCredentials } = this.configuration;
        return this.httpClient.request<PostLoansLoanIdTransactionsResponse>('post', `${basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: postLoansLoanIdTransactionsTransactionIdRequest,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                ...(withCredentials ? { withCredentials } : {}),
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Adjust a Transaction
     * Note: there is no need to specify command&#x3D;{transactionType} parameter.  Mandatory Fields: transactionDate, transactionAmount
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public adjustLoanTransaction1(requestParameters: AdjustLoanTransaction1RequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<PostLoansLoanIdTransactionsResponse>;
    public adjustLoanTransaction1(requestParameters: AdjustLoanTransaction1RequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<PostLoansLoanIdTransactionsResponse>>;
    public adjustLoanTransaction1(requestParameters: AdjustLoanTransaction1RequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<PostLoansLoanIdTransactionsResponse>>;
    public adjustLoanTransaction1(requestParameters: AdjustLoanTransaction1RequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const loanId = requestParameters?.loanId;
        if (loanId === null || loanId === undefined) {
            throw new Error('Required parameter loanId was null or undefined when calling adjustLoanTransaction1.');
        }
        const externalTransactionId = requestParameters?.externalTransactionId;
        if (externalTransactionId === null || externalTransactionId === undefined) {
            throw new Error('Required parameter externalTransactionId was null or undefined when calling adjustLoanTransaction1.');
        }
        const postLoansLoanIdTransactionsTransactionIdRequest = requestParameters?.postLoansLoanIdTransactionsTransactionIdRequest;
        if (postLoansLoanIdTransactionsTransactionIdRequest === null || postLoansLoanIdTransactionsTransactionIdRequest === undefined) {
            throw new Error('Required parameter postLoansLoanIdTransactionsTransactionIdRequest was null or undefined when calling adjustLoanTransaction1.');
        }
        const command = requestParameters?.command;

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>command, 'command');

        let localVarHeaders = this.defaultHeaders;

        // authentication (basicAuth) required
        localVarHeaders = this.configuration.addCredentialToHeaders('basicAuth', 'Authorization', localVarHeaders, 'Basic ');

        // authentication (tenantid) required
        localVarHeaders = this.configuration.addCredentialToHeaders('tenantid', 'fineract-platform-tenantid', localVarHeaders);

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/v1/loans/${this.configuration.encodeParam({name: "loanId", value: loanId, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: "int64"})}/transactions/external-id/${this.configuration.encodeParam({name: "externalTransactionId", value: externalTransactionId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}`;
        const { basePath, withCredentials } = this.configuration;
        return this.httpClient.request<PostLoansLoanIdTransactionsResponse>('post', `${basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: postLoansLoanIdTransactionsTransactionIdRequest,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                ...(withCredentials ? { withCredentials } : {}),
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Adjust a Transaction
     * Note: there is no need to specify command&#x3D;{transactionType} parameter.  Mandatory Fields: transactionDate, transactionAmount
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public adjustLoanTransaction2(requestParameters: AdjustLoanTransaction2RequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<PostLoansLoanIdTransactionsResponse>;
    public adjustLoanTransaction2(requestParameters: AdjustLoanTransaction2RequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<PostLoansLoanIdTransactionsResponse>>;
    public adjustLoanTransaction2(requestParameters: AdjustLoanTransaction2RequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<PostLoansLoanIdTransactionsResponse>>;
    public adjustLoanTransaction2(requestParameters: AdjustLoanTransaction2RequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const loanExternalId = requestParameters?.loanExternalId;
        if (loanExternalId === null || loanExternalId === undefined) {
            throw new Error('Required parameter loanExternalId was null or undefined when calling adjustLoanTransaction2.');
        }
        const transactionId = requestParameters?.transactionId;
        if (transactionId === null || transactionId === undefined) {
            throw new Error('Required parameter transactionId was null or undefined when calling adjustLoanTransaction2.');
        }
        const postLoansLoanIdTransactionsTransactionIdRequest = requestParameters?.postLoansLoanIdTransactionsTransactionIdRequest;
        if (postLoansLoanIdTransactionsTransactionIdRequest === null || postLoansLoanIdTransactionsTransactionIdRequest === undefined) {
            throw new Error('Required parameter postLoansLoanIdTransactionsTransactionIdRequest was null or undefined when calling adjustLoanTransaction2.');
        }
        const command = requestParameters?.command;

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>command, 'command');

        let localVarHeaders = this.defaultHeaders;

        // authentication (basicAuth) required
        localVarHeaders = this.configuration.addCredentialToHeaders('basicAuth', 'Authorization', localVarHeaders, 'Basic ');

        // authentication (tenantid) required
        localVarHeaders = this.configuration.addCredentialToHeaders('tenantid', 'fineract-platform-tenantid', localVarHeaders);

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/v1/loans/external-id/${this.configuration.encodeParam({name: "loanExternalId", value: loanExternalId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/transactions/${this.configuration.encodeParam({name: "transactionId", value: transactionId, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: "int64"})}`;
        const { basePath, withCredentials } = this.configuration;
        return this.httpClient.request<PostLoansLoanIdTransactionsResponse>('post', `${basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: postLoansLoanIdTransactionsTransactionIdRequest,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                ...(withCredentials ? { withCredentials } : {}),
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Adjust a Transaction
     * Note: there is no need to specify command&#x3D;{transactionType} parameter.  Mandatory Fields: transactionDate, transactionAmount
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public adjustLoanTransaction3(requestParameters: AdjustLoanTransaction3RequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<PostLoansLoanIdTransactionsResponse>;
    public adjustLoanTransaction3(requestParameters: AdjustLoanTransaction3RequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<PostLoansLoanIdTransactionsResponse>>;
    public adjustLoanTransaction3(requestParameters: AdjustLoanTransaction3RequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<PostLoansLoanIdTransactionsResponse>>;
    public adjustLoanTransaction3(requestParameters: AdjustLoanTransaction3RequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const loanExternalId = requestParameters?.loanExternalId;
        if (loanExternalId === null || loanExternalId === undefined) {
            throw new Error('Required parameter loanExternalId was null or undefined when calling adjustLoanTransaction3.');
        }
        const externalTransactionId = requestParameters?.externalTransactionId;
        if (externalTransactionId === null || externalTransactionId === undefined) {
            throw new Error('Required parameter externalTransactionId was null or undefined when calling adjustLoanTransaction3.');
        }
        const postLoansLoanIdTransactionsTransactionIdRequest = requestParameters?.postLoansLoanIdTransactionsTransactionIdRequest;
        if (postLoansLoanIdTransactionsTransactionIdRequest === null || postLoansLoanIdTransactionsTransactionIdRequest === undefined) {
            throw new Error('Required parameter postLoansLoanIdTransactionsTransactionIdRequest was null or undefined when calling adjustLoanTransaction3.');
        }
        const command = requestParameters?.command;

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>command, 'command');

        let localVarHeaders = this.defaultHeaders;

        // authentication (basicAuth) required
        localVarHeaders = this.configuration.addCredentialToHeaders('basicAuth', 'Authorization', localVarHeaders, 'Basic ');

        // authentication (tenantid) required
        localVarHeaders = this.configuration.addCredentialToHeaders('tenantid', 'fineract-platform-tenantid', localVarHeaders);

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/v1/loans/external-id/${this.configuration.encodeParam({name: "loanExternalId", value: loanExternalId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/transactions/external-id/${this.configuration.encodeParam({name: "externalTransactionId", value: externalTransactionId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}`;
        const { basePath, withCredentials } = this.configuration;
        return this.httpClient.request<PostLoansLoanIdTransactionsResponse>('post', `${basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: postLoansLoanIdTransactionsTransactionIdRequest,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                ...(withCredentials ? { withCredentials } : {}),
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Significant Loan Transactions
     * This API covers the major loan transaction functionality  Example Requests:  loans/1/transactions?command&#x3D;repayment | Make a Repayment |  loans/1/transactions?command&#x3D;merchantIssuedRefund | Merchant Issued Refund |  loans/1/transactions?command&#x3D;payoutRefund | Payout Refund |  loans/1/transactions?command&#x3D;goodwillCredit | Goodwil Credit |  loans/1/transactions?command&#x3D;chargeRefund | Charge Refund |  loans/1/transactions?command&#x3D;waiveinterest | Waive Interest |  loans/1/transactions?command&#x3D;writeoff | Write-off Loan |  loans/1/transactions?command&#x3D;close-rescheduled | Close Rescheduled Loan |  loans/1/transactions?command&#x3D;close | Close Loan |  loans/1/transactions?command&#x3D;undowriteoff | Undo Loan Write-off |  loans/1/transactions?command&#x3D;recoverypayment | Make Recovery Payment |  loans/1/transactions?command&#x3D;refundByCash | Make a Refund of an Active Loan by Cash |  loans/1/transactions?command&#x3D;foreclosure | Foreclosure of an Active Loan |  loans/1/transactions?command&#x3D;creditBalanceRefund | Credit Balance Refund |   loans/external-id/7dd80a7c-ycba-a446-t378-91eb6f53e854/transactions?command&#x3D;charge-off | Charge-off Loan |   loans/1/transactions?command&#x3D;downPayment | Down Payment |   
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public executeLoanTransaction(requestParameters: ExecuteLoanTransactionRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<PostLoansLoanIdTransactionsResponse>;
    public executeLoanTransaction(requestParameters: ExecuteLoanTransactionRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<PostLoansLoanIdTransactionsResponse>>;
    public executeLoanTransaction(requestParameters: ExecuteLoanTransactionRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<PostLoansLoanIdTransactionsResponse>>;
    public executeLoanTransaction(requestParameters: ExecuteLoanTransactionRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const loanId = requestParameters?.loanId;
        if (loanId === null || loanId === undefined) {
            throw new Error('Required parameter loanId was null or undefined when calling executeLoanTransaction.');
        }
        const postLoansLoanIdTransactionsRequest = requestParameters?.postLoansLoanIdTransactionsRequest;
        if (postLoansLoanIdTransactionsRequest === null || postLoansLoanIdTransactionsRequest === undefined) {
            throw new Error('Required parameter postLoansLoanIdTransactionsRequest was null or undefined when calling executeLoanTransaction.');
        }
        const command = requestParameters?.command;

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>command, 'command');

        let localVarHeaders = this.defaultHeaders;

        // authentication (basicAuth) required
        localVarHeaders = this.configuration.addCredentialToHeaders('basicAuth', 'Authorization', localVarHeaders, 'Basic ');

        // authentication (tenantid) required
        localVarHeaders = this.configuration.addCredentialToHeaders('tenantid', 'fineract-platform-tenantid', localVarHeaders);

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/v1/loans/${this.configuration.encodeParam({name: "loanId", value: loanId, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: "int64"})}/transactions`;
        const { basePath, withCredentials } = this.configuration;
        return this.httpClient.request<PostLoansLoanIdTransactionsResponse>('post', `${basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: postLoansLoanIdTransactionsRequest,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                ...(withCredentials ? { withCredentials } : {}),
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Significant Loan Transactions
     * This API covers the major loan transaction functionality  Example Requests:  loans/external-id/7dd80a7c-ycba-a446-t378-91eb6f53e854/transactions?command&#x3D;repayment | Make a Repayment |  loans/external-id/7dd80a7c-ycba-a446-t378-91eb6f53e854/transactions?command&#x3D;merchantIssuedRefund | Merchant Issued Refund |  loans/external-id/7dd80a7c-ycba-a446-t378-91eb6f53e854/transactions?command&#x3D;payoutRefund | Payout Refund |  loans/external-id/7dd80a7c-ycba-a446-t378-91eb6f53e854/transactions?command&#x3D;goodwillCredit | Goodwil Credit |  loans/external-id/7dd80a7c-ycba-a446-t378-91eb6f53e854/transactions?command&#x3D;chargeRefund | Charge Refund |  loans/external-id/7dd80a7c-ycba-a446-t378-91eb6f53e854/transactions?command&#x3D;waiveinterest | Waive Interest |  loans/external-id/7dd80a7c-ycba-a446-t378-91eb6f53e854/transactions?command&#x3D;writeoff | Write-off Loan |  loans/external-id/7dd80a7c-ycba-a446-t378-91eb6f53e854/transactions?command&#x3D;close-rescheduled | Close Rescheduled Loan |  loans/external-id/7dd80a7c-ycba-a446-t378-91eb6f53e854/transactions?command&#x3D;close | Close Loan |  loans/external-id/7dd80a7c-ycba-a446-t378-91eb6f53e854/transactions?command&#x3D;undowriteoff | Undo Loan Write-off |  loans/external-id/7dd80a7c-ycba-a446-t378-91eb6f53e854/transactions?command&#x3D;recoverypayment | Make Recovery Payment |  loans/external-id/7dd80a7c-ycba-a446-t378-91eb6f53e854/transactions?command&#x3D;refundByCash | Make a Refund of an Active Loan by Cash |  loans/external-id/7dd80a7c-ycba-a446-t378-91eb6f53e854/transactions?command&#x3D;foreclosure | Foreclosure of an Active Loan |  loans/external-id/7dd80a7c-ycba-a446-t378-91eb6f53e854/transactions?command&#x3D;creditBalanceRefund | Credit Balance Refund |   loans/external-id/7dd80a7c-ycba-a446-t378-91eb6f53e854/transactions?command&#x3D;charge-off | Charge-off Loan |   loans/external-id/7dd80a7c-ycba-a446-t378-91eb6f53e854/transactions?command&#x3D;downPayment | Down Payment |   
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public executeLoanTransaction1(requestParameters: ExecuteLoanTransaction1RequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<PostLoansLoanIdTransactionsResponse>;
    public executeLoanTransaction1(requestParameters: ExecuteLoanTransaction1RequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<PostLoansLoanIdTransactionsResponse>>;
    public executeLoanTransaction1(requestParameters: ExecuteLoanTransaction1RequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<PostLoansLoanIdTransactionsResponse>>;
    public executeLoanTransaction1(requestParameters: ExecuteLoanTransaction1RequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const loanExternalId = requestParameters?.loanExternalId;
        if (loanExternalId === null || loanExternalId === undefined) {
            throw new Error('Required parameter loanExternalId was null or undefined when calling executeLoanTransaction1.');
        }
        const postLoansLoanIdTransactionsRequest = requestParameters?.postLoansLoanIdTransactionsRequest;
        if (postLoansLoanIdTransactionsRequest === null || postLoansLoanIdTransactionsRequest === undefined) {
            throw new Error('Required parameter postLoansLoanIdTransactionsRequest was null or undefined when calling executeLoanTransaction1.');
        }
        const command = requestParameters?.command;

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>command, 'command');

        let localVarHeaders = this.defaultHeaders;

        // authentication (basicAuth) required
        localVarHeaders = this.configuration.addCredentialToHeaders('basicAuth', 'Authorization', localVarHeaders, 'Basic ');

        // authentication (tenantid) required
        localVarHeaders = this.configuration.addCredentialToHeaders('tenantid', 'fineract-platform-tenantid', localVarHeaders);

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/v1/loans/external-id/${this.configuration.encodeParam({name: "loanExternalId", value: loanExternalId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/transactions`;
        const { basePath, withCredentials } = this.configuration;
        return this.httpClient.request<PostLoansLoanIdTransactionsResponse>('post', `${basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: postLoansLoanIdTransactionsRequest,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                ...(withCredentials ? { withCredentials } : {}),
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Retrieve a Transaction Details
     * Retrieves a Transaction Details  Example Request:  loans/5/transactions/3
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public retrieveTransaction(requestParameters: RetrieveTransactionRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<GetLoansLoanIdTransactionsTransactionIdResponse>;
    public retrieveTransaction(requestParameters: RetrieveTransactionRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<GetLoansLoanIdTransactionsTransactionIdResponse>>;
    public retrieveTransaction(requestParameters: RetrieveTransactionRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<GetLoansLoanIdTransactionsTransactionIdResponse>>;
    public retrieveTransaction(requestParameters: RetrieveTransactionRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const loanId = requestParameters?.loanId;
        if (loanId === null || loanId === undefined) {
            throw new Error('Required parameter loanId was null or undefined when calling retrieveTransaction.');
        }
        const transactionId = requestParameters?.transactionId;
        if (transactionId === null || transactionId === undefined) {
            throw new Error('Required parameter transactionId was null or undefined when calling retrieveTransaction.');
        }
        const fields = requestParameters?.fields;

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>fields, 'fields');

        let localVarHeaders = this.defaultHeaders;

        // authentication (basicAuth) required
        localVarHeaders = this.configuration.addCredentialToHeaders('basicAuth', 'Authorization', localVarHeaders, 'Basic ');

        // authentication (tenantid) required
        localVarHeaders = this.configuration.addCredentialToHeaders('tenantid', 'fineract-platform-tenantid', localVarHeaders);

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/v1/loans/${this.configuration.encodeParam({name: "loanId", value: loanId, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: "int64"})}/transactions/${this.configuration.encodeParam({name: "transactionId", value: transactionId, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: "int64"})}`;
        const { basePath, withCredentials } = this.configuration;
        return this.httpClient.request<GetLoansLoanIdTransactionsTransactionIdResponse>('get', `${basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                ...(withCredentials ? { withCredentials } : {}),
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Retrieve a Transaction Details
     * Retrieves a Transaction Details  Example Request:  loans/external-id/7dd80a7c-ycba-a446-t378-91eb6f53e854/transactions/external-id/5dd80a7c-ccba-4446-b378-01eb6f53e871
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public retrieveTransactionByLoanExternalIdAndTransactionExternalId(requestParameters: RetrieveTransactionByLoanExternalIdAndTransactionExternalIdRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<GetLoansLoanIdTransactionsTransactionIdResponse>;
    public retrieveTransactionByLoanExternalIdAndTransactionExternalId(requestParameters: RetrieveTransactionByLoanExternalIdAndTransactionExternalIdRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<GetLoansLoanIdTransactionsTransactionIdResponse>>;
    public retrieveTransactionByLoanExternalIdAndTransactionExternalId(requestParameters: RetrieveTransactionByLoanExternalIdAndTransactionExternalIdRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<GetLoansLoanIdTransactionsTransactionIdResponse>>;
    public retrieveTransactionByLoanExternalIdAndTransactionExternalId(requestParameters: RetrieveTransactionByLoanExternalIdAndTransactionExternalIdRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const loanExternalId = requestParameters?.loanExternalId;
        if (loanExternalId === null || loanExternalId === undefined) {
            throw new Error('Required parameter loanExternalId was null or undefined when calling retrieveTransactionByLoanExternalIdAndTransactionExternalId.');
        }
        const externalTransactionId = requestParameters?.externalTransactionId;
        if (externalTransactionId === null || externalTransactionId === undefined) {
            throw new Error('Required parameter externalTransactionId was null or undefined when calling retrieveTransactionByLoanExternalIdAndTransactionExternalId.');
        }
        const fields = requestParameters?.fields;

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>fields, 'fields');

        let localVarHeaders = this.defaultHeaders;

        // authentication (basicAuth) required
        localVarHeaders = this.configuration.addCredentialToHeaders('basicAuth', 'Authorization', localVarHeaders, 'Basic ');

        // authentication (tenantid) required
        localVarHeaders = this.configuration.addCredentialToHeaders('tenantid', 'fineract-platform-tenantid', localVarHeaders);

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/v1/loans/external-id/${this.configuration.encodeParam({name: "loanExternalId", value: loanExternalId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/transactions/external-id/${this.configuration.encodeParam({name: "externalTransactionId", value: externalTransactionId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}`;
        const { basePath, withCredentials } = this.configuration;
        return this.httpClient.request<GetLoansLoanIdTransactionsTransactionIdResponse>('get', `${basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                ...(withCredentials ? { withCredentials } : {}),
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Retrieve a Transaction Details
     * Retrieves a Transaction Details  Example Request:  loans/5/transactions/3
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public retrieveTransactionByLoanExternalIdAndTransactionId(requestParameters: RetrieveTransactionByLoanExternalIdAndTransactionIdRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<GetLoansLoanIdTransactionsTransactionIdResponse>;
    public retrieveTransactionByLoanExternalIdAndTransactionId(requestParameters: RetrieveTransactionByLoanExternalIdAndTransactionIdRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<GetLoansLoanIdTransactionsTransactionIdResponse>>;
    public retrieveTransactionByLoanExternalIdAndTransactionId(requestParameters: RetrieveTransactionByLoanExternalIdAndTransactionIdRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<GetLoansLoanIdTransactionsTransactionIdResponse>>;
    public retrieveTransactionByLoanExternalIdAndTransactionId(requestParameters: RetrieveTransactionByLoanExternalIdAndTransactionIdRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const loanExternalId = requestParameters?.loanExternalId;
        if (loanExternalId === null || loanExternalId === undefined) {
            throw new Error('Required parameter loanExternalId was null or undefined when calling retrieveTransactionByLoanExternalIdAndTransactionId.');
        }
        const transactionId = requestParameters?.transactionId;
        if (transactionId === null || transactionId === undefined) {
            throw new Error('Required parameter transactionId was null or undefined when calling retrieveTransactionByLoanExternalIdAndTransactionId.');
        }
        const fields = requestParameters?.fields;

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>fields, 'fields');

        let localVarHeaders = this.defaultHeaders;

        // authentication (basicAuth) required
        localVarHeaders = this.configuration.addCredentialToHeaders('basicAuth', 'Authorization', localVarHeaders, 'Basic ');

        // authentication (tenantid) required
        localVarHeaders = this.configuration.addCredentialToHeaders('tenantid', 'fineract-platform-tenantid', localVarHeaders);

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/v1/loans/external-id/${this.configuration.encodeParam({name: "loanExternalId", value: loanExternalId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/transactions/${this.configuration.encodeParam({name: "transactionId", value: transactionId, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: "int64"})}`;
        const { basePath, withCredentials } = this.configuration;
        return this.httpClient.request<GetLoansLoanIdTransactionsTransactionIdResponse>('get', `${basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                ...(withCredentials ? { withCredentials } : {}),
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Retrieve a Transaction Details
     * Retrieves a Transaction Details  Example Request:  loans/5/transactions/external-id/5dd80a7c-ccba-4446-b378-01eb6f53e871
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public retrieveTransactionByTransactionExternalId(requestParameters: RetrieveTransactionByTransactionExternalIdRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<GetLoansLoanIdTransactionsTransactionIdResponse>;
    public retrieveTransactionByTransactionExternalId(requestParameters: RetrieveTransactionByTransactionExternalIdRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<GetLoansLoanIdTransactionsTransactionIdResponse>>;
    public retrieveTransactionByTransactionExternalId(requestParameters: RetrieveTransactionByTransactionExternalIdRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<GetLoansLoanIdTransactionsTransactionIdResponse>>;
    public retrieveTransactionByTransactionExternalId(requestParameters: RetrieveTransactionByTransactionExternalIdRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const loanId = requestParameters?.loanId;
        if (loanId === null || loanId === undefined) {
            throw new Error('Required parameter loanId was null or undefined when calling retrieveTransactionByTransactionExternalId.');
        }
        const externalTransactionId = requestParameters?.externalTransactionId;
        if (externalTransactionId === null || externalTransactionId === undefined) {
            throw new Error('Required parameter externalTransactionId was null or undefined when calling retrieveTransactionByTransactionExternalId.');
        }
        const fields = requestParameters?.fields;

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>fields, 'fields');

        let localVarHeaders = this.defaultHeaders;

        // authentication (basicAuth) required
        localVarHeaders = this.configuration.addCredentialToHeaders('basicAuth', 'Authorization', localVarHeaders, 'Basic ');

        // authentication (tenantid) required
        localVarHeaders = this.configuration.addCredentialToHeaders('tenantid', 'fineract-platform-tenantid', localVarHeaders);

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/v1/loans/${this.configuration.encodeParam({name: "loanId", value: loanId, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: "int64"})}/transactions/external-id/${this.configuration.encodeParam({name: "externalTransactionId", value: externalTransactionId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}`;
        const { basePath, withCredentials } = this.configuration;
        return this.httpClient.request<GetLoansLoanIdTransactionsTransactionIdResponse>('get', `${basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                ...(withCredentials ? { withCredentials } : {}),
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Retrieve Loan Transaction Template
     * This is a convenience resource. It can be useful when building maintenance user interface screens for client applications. The template data returned consists of any or all of:  Field Defaults Allowed Value Lists  Example Requests:  loans/1/transactions/template?command&#x3D;repaymentloans/1/transactions/template?command&#x3D;merchantIssuedRefundloans/1/transactions/template?command&#x3D;payoutRefundloans/1/transactions/template?command&#x3D;goodwillCredit loans/1/transactions/template?command&#x3D;waiveinterest loans/1/transactions/template?command&#x3D;writeoff loans/1/transactions/template?command&#x3D;close-rescheduled loans/1/transactions/template?command&#x3D;close loans/1/transactions/template?command&#x3D;disburse loans/1/transactions/template?command&#x3D;disburseToSavings loans/1/transactions/template?command&#x3D;recoverypayment loans/1/transactions/template?command&#x3D;prepayLoan loans/1/transactions/template?command&#x3D;refundbycash loans/1/transactions/template?command&#x3D;refundbytransfer loans/1/transactions/template?command&#x3D;foreclosure loans/1/transactions/template?command&#x3D;interestPaymentWaiver loans/1/transactions/template?command&#x3D;creditBalanceRefund (returned \&#39;amount\&#39; field will have the overpaid value) loans/1/transactions/template?command&#x3D;charge-off loans/1/transactions/template?command&#x3D;downPayment 
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public retrieveTransactionTemplate(requestParameters: RetrieveTransactionTemplateRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<GetLoansLoanIdTransactionsTemplateResponse>;
    public retrieveTransactionTemplate(requestParameters: RetrieveTransactionTemplateRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<GetLoansLoanIdTransactionsTemplateResponse>>;
    public retrieveTransactionTemplate(requestParameters: RetrieveTransactionTemplateRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<GetLoansLoanIdTransactionsTemplateResponse>>;
    public retrieveTransactionTemplate(requestParameters: RetrieveTransactionTemplateRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const loanId = requestParameters?.loanId;
        if (loanId === null || loanId === undefined) {
            throw new Error('Required parameter loanId was null or undefined when calling retrieveTransactionTemplate.');
        }
        const command = requestParameters?.command;
        const dateFormat = requestParameters?.dateFormat;
        const transactionDate = requestParameters?.transactionDate;
        const locale = requestParameters?.locale;
        const transactionId = requestParameters?.transactionId;

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>command, 'command');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>dateFormat, 'dateFormat');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>transactionDate, 'transactionDate');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>locale, 'locale');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>transactionId, 'transactionId');

        let localVarHeaders = this.defaultHeaders;

        // authentication (basicAuth) required
        localVarHeaders = this.configuration.addCredentialToHeaders('basicAuth', 'Authorization', localVarHeaders, 'Basic ');

        // authentication (tenantid) required
        localVarHeaders = this.configuration.addCredentialToHeaders('tenantid', 'fineract-platform-tenantid', localVarHeaders);

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/v1/loans/${this.configuration.encodeParam({name: "loanId", value: loanId, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: "int64"})}/transactions/template`;
        const { basePath, withCredentials } = this.configuration;
        return this.httpClient.request<GetLoansLoanIdTransactionsTemplateResponse>('get', `${basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                ...(withCredentials ? { withCredentials } : {}),
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Retrieve Loan Transaction Template
     * This is a convenience resource. It can be useful when building maintenance user interface screens for client applications. The template data returned consists of any or all of:  Field Defaults Allowed Value Lists  Example Requests:  loans/1/transactions/template?command&#x3D;repaymentloans/1/transactions/template?command&#x3D;merchantIssuedRefundloans/1/transactions/template?command&#x3D;payoutRefundloans/1/transactions/template?command&#x3D;goodwillCredit loans/1/transactions/template?command&#x3D;waiveinterest loans/1/transactions/template?command&#x3D;writeoff loans/1/transactions/template?command&#x3D;close-rescheduled loans/1/transactions/template?command&#x3D;close loans/1/transactions/template?command&#x3D;disburse loans/1/transactions/template?command&#x3D;disburseToSavings loans/1/transactions/template?command&#x3D;recoverypayment loans/1/transactions/template?command&#x3D;prepayLoan loans/1/transactions/template?command&#x3D;refundbycash loans/1/transactions/template?command&#x3D;refundbytransfer loans/1/transactions/template?command&#x3D;foreclosure loans/1/transactions/template?command&#x3D;interestPaymentWaiver loans/1/transactions/template?command&#x3D;creditBalanceRefund (returned \&#39;amount\&#39; field will have the overpaid value) loans/1/transactions/template?command&#x3D;charge-off loans/1/transactions/template?command&#x3D;downPayment 
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public retrieveTransactionTemplate1(requestParameters: RetrieveTransactionTemplate1RequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<GetLoansLoanIdTransactionsTemplateResponse>;
    public retrieveTransactionTemplate1(requestParameters: RetrieveTransactionTemplate1RequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<GetLoansLoanIdTransactionsTemplateResponse>>;
    public retrieveTransactionTemplate1(requestParameters: RetrieveTransactionTemplate1RequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<GetLoansLoanIdTransactionsTemplateResponse>>;
    public retrieveTransactionTemplate1(requestParameters: RetrieveTransactionTemplate1RequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const loanExternalId = requestParameters?.loanExternalId;
        if (loanExternalId === null || loanExternalId === undefined) {
            throw new Error('Required parameter loanExternalId was null or undefined when calling retrieveTransactionTemplate1.');
        }
        const command = requestParameters?.command;
        const dateFormat = requestParameters?.dateFormat;
        const transactionDate = requestParameters?.transactionDate;
        const locale = requestParameters?.locale;
        const transactionId = requestParameters?.transactionId;

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>command, 'command');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>dateFormat, 'dateFormat');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>transactionDate, 'transactionDate');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>locale, 'locale');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>transactionId, 'transactionId');

        let localVarHeaders = this.defaultHeaders;

        // authentication (basicAuth) required
        localVarHeaders = this.configuration.addCredentialToHeaders('basicAuth', 'Authorization', localVarHeaders, 'Basic ');

        // authentication (tenantid) required
        localVarHeaders = this.configuration.addCredentialToHeaders('tenantid', 'fineract-platform-tenantid', localVarHeaders);

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/v1/loans/external-id/${this.configuration.encodeParam({name: "loanExternalId", value: loanExternalId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/transactions/template`;
        const { basePath, withCredentials } = this.configuration;
        return this.httpClient.request<GetLoansLoanIdTransactionsTemplateResponse>('get', `${basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                ...(withCredentials ? { withCredentials } : {}),
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Retrieve Transactions
     * Retrieves transactions of a loan
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public retrieveTransactionsByExternalLoanId(requestParameters: RetrieveTransactionsByExternalLoanIdRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<GetLoansLoanIdTransactionsResponse>;
    public retrieveTransactionsByExternalLoanId(requestParameters: RetrieveTransactionsByExternalLoanIdRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<GetLoansLoanIdTransactionsResponse>>;
    public retrieveTransactionsByExternalLoanId(requestParameters: RetrieveTransactionsByExternalLoanIdRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<GetLoansLoanIdTransactionsResponse>>;
    public retrieveTransactionsByExternalLoanId(requestParameters: RetrieveTransactionsByExternalLoanIdRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const loanExternalId = requestParameters?.loanExternalId;
        if (loanExternalId === null || loanExternalId === undefined) {
            throw new Error('Required parameter loanExternalId was null or undefined when calling retrieveTransactionsByExternalLoanId.');
        }
        const excludedTypes = requestParameters?.excludedTypes;
        const page = requestParameters?.page;
        const size = requestParameters?.size;
        const sort = requestParameters?.sort;

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (excludedTypes) {
            excludedTypes.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'excludedTypes');
            })
        }
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>page, 'page');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>size, 'size');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>sort, 'sort');

        let localVarHeaders = this.defaultHeaders;

        // authentication (basicAuth) required
        localVarHeaders = this.configuration.addCredentialToHeaders('basicAuth', 'Authorization', localVarHeaders, 'Basic ');

        // authentication (tenantid) required
        localVarHeaders = this.configuration.addCredentialToHeaders('tenantid', 'fineract-platform-tenantid', localVarHeaders);

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/v1/loans/external-id/${this.configuration.encodeParam({name: "loanExternalId", value: loanExternalId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/transactions`;
        const { basePath, withCredentials } = this.configuration;
        return this.httpClient.request<GetLoansLoanIdTransactionsResponse>('get', `${basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                ...(withCredentials ? { withCredentials } : {}),
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Retrieve Transactions
     * Retrieves transactions of a loan
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public retrieveTransactionsByLoanId(requestParameters: RetrieveTransactionsByLoanIdRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<GetLoansLoanIdTransactionsResponse>;
    public retrieveTransactionsByLoanId(requestParameters: RetrieveTransactionsByLoanIdRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<GetLoansLoanIdTransactionsResponse>>;
    public retrieveTransactionsByLoanId(requestParameters: RetrieveTransactionsByLoanIdRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<GetLoansLoanIdTransactionsResponse>>;
    public retrieveTransactionsByLoanId(requestParameters: RetrieveTransactionsByLoanIdRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const loanId = requestParameters?.loanId;
        if (loanId === null || loanId === undefined) {
            throw new Error('Required parameter loanId was null or undefined when calling retrieveTransactionsByLoanId.');
        }
        const excludedTypes = requestParameters?.excludedTypes;
        const page = requestParameters?.page;
        const size = requestParameters?.size;
        const sort = requestParameters?.sort;

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (excludedTypes) {
            excludedTypes.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'excludedTypes');
            })
        }
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>page, 'page');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>size, 'size');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>sort, 'sort');

        let localVarHeaders = this.defaultHeaders;

        // authentication (basicAuth) required
        localVarHeaders = this.configuration.addCredentialToHeaders('basicAuth', 'Authorization', localVarHeaders, 'Basic ');

        // authentication (tenantid) required
        localVarHeaders = this.configuration.addCredentialToHeaders('tenantid', 'fineract-platform-tenantid', localVarHeaders);

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/v1/loans/${this.configuration.encodeParam({name: "loanId", value: loanId, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: "int64"})}/transactions`;
        const { basePath, withCredentials } = this.configuration;
        return this.httpClient.request<GetLoansLoanIdTransactionsResponse>('get', `${basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                ...(withCredentials ? { withCredentials } : {}),
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Undo a Waive Charge Transaction
     * Undo a Waive Charge Transaction
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public undoWaiveCharge(requestParameters: UndoWaiveChargeRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<PutChargeTransactionChangesResponse>;
    public undoWaiveCharge(requestParameters: UndoWaiveChargeRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<PutChargeTransactionChangesResponse>>;
    public undoWaiveCharge(requestParameters: UndoWaiveChargeRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<PutChargeTransactionChangesResponse>>;
    public undoWaiveCharge(requestParameters: UndoWaiveChargeRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const loanId = requestParameters?.loanId;
        if (loanId === null || loanId === undefined) {
            throw new Error('Required parameter loanId was null or undefined when calling undoWaiveCharge.');
        }
        const transactionId = requestParameters?.transactionId;
        if (transactionId === null || transactionId === undefined) {
            throw new Error('Required parameter transactionId was null or undefined when calling undoWaiveCharge.');
        }
        const putChargeTransactionChangesRequest = requestParameters?.putChargeTransactionChangesRequest;
        if (putChargeTransactionChangesRequest === null || putChargeTransactionChangesRequest === undefined) {
            throw new Error('Required parameter putChargeTransactionChangesRequest was null or undefined when calling undoWaiveCharge.');
        }

        let localVarHeaders = this.defaultHeaders;

        // authentication (basicAuth) required
        localVarHeaders = this.configuration.addCredentialToHeaders('basicAuth', 'Authorization', localVarHeaders, 'Basic ');

        // authentication (tenantid) required
        localVarHeaders = this.configuration.addCredentialToHeaders('tenantid', 'fineract-platform-tenantid', localVarHeaders);

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/v1/loans/${this.configuration.encodeParam({name: "loanId", value: loanId, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: "int64"})}/transactions/${this.configuration.encodeParam({name: "transactionId", value: transactionId, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: "int64"})}`;
        const { basePath, withCredentials } = this.configuration;
        return this.httpClient.request<PutChargeTransactionChangesResponse>('put', `${basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: putChargeTransactionChangesRequest,
                responseType: <any>responseType_,
                ...(withCredentials ? { withCredentials } : {}),
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Undo a Waive Charge Transaction
     * Undo a Waive Charge Transaction
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public undoWaiveCharge1(requestParameters: UndoWaiveCharge1RequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<PutChargeTransactionChangesResponse>;
    public undoWaiveCharge1(requestParameters: UndoWaiveCharge1RequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<PutChargeTransactionChangesResponse>>;
    public undoWaiveCharge1(requestParameters: UndoWaiveCharge1RequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<PutChargeTransactionChangesResponse>>;
    public undoWaiveCharge1(requestParameters: UndoWaiveCharge1RequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const loanId = requestParameters?.loanId;
        if (loanId === null || loanId === undefined) {
            throw new Error('Required parameter loanId was null or undefined when calling undoWaiveCharge1.');
        }
        const transactionExternalId = requestParameters?.transactionExternalId;
        if (transactionExternalId === null || transactionExternalId === undefined) {
            throw new Error('Required parameter transactionExternalId was null or undefined when calling undoWaiveCharge1.');
        }
        const putChargeTransactionChangesRequest = requestParameters?.putChargeTransactionChangesRequest;
        if (putChargeTransactionChangesRequest === null || putChargeTransactionChangesRequest === undefined) {
            throw new Error('Required parameter putChargeTransactionChangesRequest was null or undefined when calling undoWaiveCharge1.');
        }

        let localVarHeaders = this.defaultHeaders;

        // authentication (basicAuth) required
        localVarHeaders = this.configuration.addCredentialToHeaders('basicAuth', 'Authorization', localVarHeaders, 'Basic ');

        // authentication (tenantid) required
        localVarHeaders = this.configuration.addCredentialToHeaders('tenantid', 'fineract-platform-tenantid', localVarHeaders);

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/v1/loans/${this.configuration.encodeParam({name: "loanId", value: loanId, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: "int64"})}/transactions/external-id/${this.configuration.encodeParam({name: "transactionExternalId", value: transactionExternalId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}`;
        const { basePath, withCredentials } = this.configuration;
        return this.httpClient.request<PutChargeTransactionChangesResponse>('put', `${basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: putChargeTransactionChangesRequest,
                responseType: <any>responseType_,
                ...(withCredentials ? { withCredentials } : {}),
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Undo a Waive Charge Transaction
     * Undo a Waive Charge Transaction
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public undoWaiveCharge2(requestParameters: UndoWaiveCharge2RequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<PutChargeTransactionChangesResponse>;
    public undoWaiveCharge2(requestParameters: UndoWaiveCharge2RequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<PutChargeTransactionChangesResponse>>;
    public undoWaiveCharge2(requestParameters: UndoWaiveCharge2RequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<PutChargeTransactionChangesResponse>>;
    public undoWaiveCharge2(requestParameters: UndoWaiveCharge2RequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const loanExternalId = requestParameters?.loanExternalId;
        if (loanExternalId === null || loanExternalId === undefined) {
            throw new Error('Required parameter loanExternalId was null or undefined when calling undoWaiveCharge2.');
        }
        const transactionId = requestParameters?.transactionId;
        if (transactionId === null || transactionId === undefined) {
            throw new Error('Required parameter transactionId was null or undefined when calling undoWaiveCharge2.');
        }
        const putChargeTransactionChangesRequest = requestParameters?.putChargeTransactionChangesRequest;
        if (putChargeTransactionChangesRequest === null || putChargeTransactionChangesRequest === undefined) {
            throw new Error('Required parameter putChargeTransactionChangesRequest was null or undefined when calling undoWaiveCharge2.');
        }

        let localVarHeaders = this.defaultHeaders;

        // authentication (basicAuth) required
        localVarHeaders = this.configuration.addCredentialToHeaders('basicAuth', 'Authorization', localVarHeaders, 'Basic ');

        // authentication (tenantid) required
        localVarHeaders = this.configuration.addCredentialToHeaders('tenantid', 'fineract-platform-tenantid', localVarHeaders);

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/v1/loans/external-id/${this.configuration.encodeParam({name: "loanExternalId", value: loanExternalId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/transactions/${this.configuration.encodeParam({name: "transactionId", value: transactionId, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: "int64"})}`;
        const { basePath, withCredentials } = this.configuration;
        return this.httpClient.request<PutChargeTransactionChangesResponse>('put', `${basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: putChargeTransactionChangesRequest,
                responseType: <any>responseType_,
                ...(withCredentials ? { withCredentials } : {}),
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Undo a Waive Charge Transaction
     * Undo a Waive Charge Transaction
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public undoWaiveCharge3(requestParameters: UndoWaiveCharge3RequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<PutChargeTransactionChangesResponse>;
    public undoWaiveCharge3(requestParameters: UndoWaiveCharge3RequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<PutChargeTransactionChangesResponse>>;
    public undoWaiveCharge3(requestParameters: UndoWaiveCharge3RequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<PutChargeTransactionChangesResponse>>;
    public undoWaiveCharge3(requestParameters: UndoWaiveCharge3RequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const loanExternalId = requestParameters?.loanExternalId;
        if (loanExternalId === null || loanExternalId === undefined) {
            throw new Error('Required parameter loanExternalId was null or undefined when calling undoWaiveCharge3.');
        }
        const transactionExternalId = requestParameters?.transactionExternalId;
        if (transactionExternalId === null || transactionExternalId === undefined) {
            throw new Error('Required parameter transactionExternalId was null or undefined when calling undoWaiveCharge3.');
        }
        const putChargeTransactionChangesRequest = requestParameters?.putChargeTransactionChangesRequest;
        if (putChargeTransactionChangesRequest === null || putChargeTransactionChangesRequest === undefined) {
            throw new Error('Required parameter putChargeTransactionChangesRequest was null or undefined when calling undoWaiveCharge3.');
        }

        let localVarHeaders = this.defaultHeaders;

        // authentication (basicAuth) required
        localVarHeaders = this.configuration.addCredentialToHeaders('basicAuth', 'Authorization', localVarHeaders, 'Basic ');

        // authentication (tenantid) required
        localVarHeaders = this.configuration.addCredentialToHeaders('tenantid', 'fineract-platform-tenantid', localVarHeaders);

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/v1/loans/external-id/${this.configuration.encodeParam({name: "loanExternalId", value: loanExternalId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/transactions/external-id/${this.configuration.encodeParam({name: "transactionExternalId", value: transactionExternalId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}`;
        const { basePath, withCredentials } = this.configuration;
        return this.httpClient.request<PutChargeTransactionChangesResponse>('put', `${basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: putChargeTransactionChangesRequest,
                responseType: <any>responseType_,
                ...(withCredentials ? { withCredentials } : {}),
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

}
