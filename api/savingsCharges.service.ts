/**
 * Apache Fineract REST API
 *
 * Contact: dev@fineract.apache.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext 
        }       from '@angular/common/http';
import { CustomHttpParameterCodec }                          from '../encoder';
import { Observable }                                        from 'rxjs';

// @ts-ignore
import { DeleteSavingsAccountsSavingsAccountIdChargesSavingsAccountChargeIdResponse } from '../model/deleteSavingsAccountsSavingsAccountIdChargesSavingsAccountChargeIdResponse';
// @ts-ignore
import { GetSavingsAccountsSavingsAccountIdChargesResponse } from '../model/getSavingsAccountsSavingsAccountIdChargesResponse';
// @ts-ignore
import { GetSavingsAccountsSavingsAccountIdChargesSavingsAccountChargeIdResponse } from '../model/getSavingsAccountsSavingsAccountIdChargesSavingsAccountChargeIdResponse';
// @ts-ignore
import { GetSavingsAccountsSavingsAccountIdChargesTemplateResponse } from '../model/getSavingsAccountsSavingsAccountIdChargesTemplateResponse';
// @ts-ignore
import { PostSavingsAccountsSavingsAccountIdChargesRequest } from '../model/postSavingsAccountsSavingsAccountIdChargesRequest';
// @ts-ignore
import { PostSavingsAccountsSavingsAccountIdChargesResponse } from '../model/postSavingsAccountsSavingsAccountIdChargesResponse';
// @ts-ignore
import { PostSavingsAccountsSavingsAccountIdChargesSavingsAccountChargeIdRequest } from '../model/postSavingsAccountsSavingsAccountIdChargesSavingsAccountChargeIdRequest';
// @ts-ignore
import { PostSavingsAccountsSavingsAccountIdChargesSavingsAccountChargeIdResponse } from '../model/postSavingsAccountsSavingsAccountIdChargesSavingsAccountChargeIdResponse';
// @ts-ignore
import { PutSavingsAccountsSavingsAccountIdChargesSavingsAccountChargeIdRequest } from '../model/putSavingsAccountsSavingsAccountIdChargesSavingsAccountChargeIdRequest';
// @ts-ignore
import { PutSavingsAccountsSavingsAccountIdChargesSavingsAccountChargeIdResponse } from '../model/putSavingsAccountsSavingsAccountIdChargesSavingsAccountChargeIdResponse';

// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';
import { BaseService } from '../api.base.service';


export interface AddSavingsAccountChargeRequestParams {
    /** savingsAccountId */
    savingsAccountId: number;
    postSavingsAccountsSavingsAccountIdChargesRequest: PostSavingsAccountsSavingsAccountIdChargesRequest;
}

export interface DeleteSavingsAccountChargeRequestParams {
    /** savingsAccountId */
    savingsAccountId: number;
    /** savingsAccountChargeId */
    savingsAccountChargeId: number;
}

export interface PayOrWaiveSavingsAccountChargeRequestParams {
    /** savingsAccountId */
    savingsAccountId: number;
    /** savingsAccountChargeId */
    savingsAccountChargeId: number;
    postSavingsAccountsSavingsAccountIdChargesSavingsAccountChargeIdRequest: PostSavingsAccountsSavingsAccountIdChargesSavingsAccountChargeIdRequest;
    /** command */
    command?: string;
}

export interface RetrieveAllSavingsAccountChargesRequestParams {
    /** savingsAccountId */
    savingsAccountId: number;
    /** chargeStatus */
    chargeStatus?: string;
}

export interface RetrieveSavingsAccountChargeRequestParams {
    /** savingsAccountId */
    savingsAccountId: number;
    /** savingsAccountChargeId */
    savingsAccountChargeId: number;
}

export interface RetrieveTemplate18RequestParams {
    /** savingsAccountId */
    savingsAccountId: number;
}

export interface UpdateSavingsAccountChargeRequestParams {
    /** savingsAccountId */
    savingsAccountId: number;
    /** savingsAccountChargeId */
    savingsAccountChargeId: number;
    putSavingsAccountsSavingsAccountIdChargesSavingsAccountChargeIdRequest: PutSavingsAccountsSavingsAccountIdChargesSavingsAccountChargeIdRequest;
}


@Injectable({
  providedIn: 'root'
})
export class SavingsChargesService extends BaseService {

    constructor(protected httpClient: HttpClient, @Optional() @Inject(BASE_PATH) basePath: string|string[], @Optional() configuration?: Configuration) {
        super(basePath, configuration);
    }

    /**
     * Create a Savings account Charge
     * Creates a Savings account Charge  Mandatory Fields for Savings account Charges: chargeId, amount  chargeId, amount, dueDate, dateFormat, locale  chargeId, amount, feeOnMonthDay, monthDayFormat, locale
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public addSavingsAccountCharge(requestParameters: AddSavingsAccountChargeRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<PostSavingsAccountsSavingsAccountIdChargesResponse>;
    public addSavingsAccountCharge(requestParameters: AddSavingsAccountChargeRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<PostSavingsAccountsSavingsAccountIdChargesResponse>>;
    public addSavingsAccountCharge(requestParameters: AddSavingsAccountChargeRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<PostSavingsAccountsSavingsAccountIdChargesResponse>>;
    public addSavingsAccountCharge(requestParameters: AddSavingsAccountChargeRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const savingsAccountId = requestParameters?.savingsAccountId;
        if (savingsAccountId === null || savingsAccountId === undefined) {
            throw new Error('Required parameter savingsAccountId was null or undefined when calling addSavingsAccountCharge.');
        }
        const postSavingsAccountsSavingsAccountIdChargesRequest = requestParameters?.postSavingsAccountsSavingsAccountIdChargesRequest;
        if (postSavingsAccountsSavingsAccountIdChargesRequest === null || postSavingsAccountsSavingsAccountIdChargesRequest === undefined) {
            throw new Error('Required parameter postSavingsAccountsSavingsAccountIdChargesRequest was null or undefined when calling addSavingsAccountCharge.');
        }

        let localVarHeaders = this.defaultHeaders;

        // authentication (basicAuth) required
        localVarHeaders = this.configuration.addCredentialToHeaders('basicAuth', 'Authorization', localVarHeaders, 'Basic ');

        // authentication (tenantid) required
        localVarHeaders = this.configuration.addCredentialToHeaders('tenantid', 'fineract-platform-tenantid', localVarHeaders);

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/v1/savingsaccounts/${this.configuration.encodeParam({name: "savingsAccountId", value: savingsAccountId, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: "int64"})}/charges`;
        const { basePath, withCredentials } = this.configuration;
        return this.httpClient.request<PostSavingsAccountsSavingsAccountIdChargesResponse>('post', `${basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: postSavingsAccountsSavingsAccountIdChargesRequest,
                responseType: <any>responseType_,
                ...(withCredentials ? { withCredentials } : {}),
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Delete a Savings account Charge
     * Note: Currently, A Savings account Charge may only be removed from Savings that are not yet approved.
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteSavingsAccountCharge(requestParameters: DeleteSavingsAccountChargeRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<DeleteSavingsAccountsSavingsAccountIdChargesSavingsAccountChargeIdResponse>;
    public deleteSavingsAccountCharge(requestParameters: DeleteSavingsAccountChargeRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<DeleteSavingsAccountsSavingsAccountIdChargesSavingsAccountChargeIdResponse>>;
    public deleteSavingsAccountCharge(requestParameters: DeleteSavingsAccountChargeRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<DeleteSavingsAccountsSavingsAccountIdChargesSavingsAccountChargeIdResponse>>;
    public deleteSavingsAccountCharge(requestParameters: DeleteSavingsAccountChargeRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const savingsAccountId = requestParameters?.savingsAccountId;
        if (savingsAccountId === null || savingsAccountId === undefined) {
            throw new Error('Required parameter savingsAccountId was null or undefined when calling deleteSavingsAccountCharge.');
        }
        const savingsAccountChargeId = requestParameters?.savingsAccountChargeId;
        if (savingsAccountChargeId === null || savingsAccountChargeId === undefined) {
            throw new Error('Required parameter savingsAccountChargeId was null or undefined when calling deleteSavingsAccountCharge.');
        }

        let localVarHeaders = this.defaultHeaders;

        // authentication (basicAuth) required
        localVarHeaders = this.configuration.addCredentialToHeaders('basicAuth', 'Authorization', localVarHeaders, 'Basic ');

        // authentication (tenantid) required
        localVarHeaders = this.configuration.addCredentialToHeaders('tenantid', 'fineract-platform-tenantid', localVarHeaders);

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/v1/savingsaccounts/${this.configuration.encodeParam({name: "savingsAccountId", value: savingsAccountId, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: "int64"})}/charges/${this.configuration.encodeParam({name: "savingsAccountChargeId", value: savingsAccountChargeId, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: "int64"})}`;
        const { basePath, withCredentials } = this.configuration;
        return this.httpClient.request<DeleteSavingsAccountsSavingsAccountIdChargesSavingsAccountChargeIdResponse>('delete', `${basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                ...(withCredentials ? { withCredentials } : {}),
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Pay a Savings account Charge | Waive off a Savings account Charge | Inactivate a Savings account Charge
     * Pay a Savings account Charge:  An active charge will be paid when savings account is active and having sufficient balance.  Waive off a Savings account Charge:  Outstanding charge amount will be waived off.  Inactivate a Savings account Charge:  A charge will be allowed to inactivate when savings account is active and not having any dues as of today. If charge is overpaid, corresponding charge payment transactions will be reversed.  Showing request/response for \&#39;Pay a Savings account Charge\&#39;
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public payOrWaiveSavingsAccountCharge(requestParameters: PayOrWaiveSavingsAccountChargeRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<PostSavingsAccountsSavingsAccountIdChargesSavingsAccountChargeIdResponse>;
    public payOrWaiveSavingsAccountCharge(requestParameters: PayOrWaiveSavingsAccountChargeRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<PostSavingsAccountsSavingsAccountIdChargesSavingsAccountChargeIdResponse>>;
    public payOrWaiveSavingsAccountCharge(requestParameters: PayOrWaiveSavingsAccountChargeRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<PostSavingsAccountsSavingsAccountIdChargesSavingsAccountChargeIdResponse>>;
    public payOrWaiveSavingsAccountCharge(requestParameters: PayOrWaiveSavingsAccountChargeRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const savingsAccountId = requestParameters?.savingsAccountId;
        if (savingsAccountId === null || savingsAccountId === undefined) {
            throw new Error('Required parameter savingsAccountId was null or undefined when calling payOrWaiveSavingsAccountCharge.');
        }
        const savingsAccountChargeId = requestParameters?.savingsAccountChargeId;
        if (savingsAccountChargeId === null || savingsAccountChargeId === undefined) {
            throw new Error('Required parameter savingsAccountChargeId was null or undefined when calling payOrWaiveSavingsAccountCharge.');
        }
        const postSavingsAccountsSavingsAccountIdChargesSavingsAccountChargeIdRequest = requestParameters?.postSavingsAccountsSavingsAccountIdChargesSavingsAccountChargeIdRequest;
        if (postSavingsAccountsSavingsAccountIdChargesSavingsAccountChargeIdRequest === null || postSavingsAccountsSavingsAccountIdChargesSavingsAccountChargeIdRequest === undefined) {
            throw new Error('Required parameter postSavingsAccountsSavingsAccountIdChargesSavingsAccountChargeIdRequest was null or undefined when calling payOrWaiveSavingsAccountCharge.');
        }
        const command = requestParameters?.command;

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>command, 'command');

        let localVarHeaders = this.defaultHeaders;

        // authentication (basicAuth) required
        localVarHeaders = this.configuration.addCredentialToHeaders('basicAuth', 'Authorization', localVarHeaders, 'Basic ');

        // authentication (tenantid) required
        localVarHeaders = this.configuration.addCredentialToHeaders('tenantid', 'fineract-platform-tenantid', localVarHeaders);

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/v1/savingsaccounts/${this.configuration.encodeParam({name: "savingsAccountId", value: savingsAccountId, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: "int64"})}/charges/${this.configuration.encodeParam({name: "savingsAccountChargeId", value: savingsAccountChargeId, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: "int64"})}`;
        const { basePath, withCredentials } = this.configuration;
        return this.httpClient.request<PostSavingsAccountsSavingsAccountIdChargesSavingsAccountChargeIdResponse>('post', `${basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: postSavingsAccountsSavingsAccountIdChargesSavingsAccountChargeIdRequest,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                ...(withCredentials ? { withCredentials } : {}),
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * List Savings Charges
     * Lists Savings Charges  Example Requests:  savingsaccounts/1/charges  savingsaccounts/1/charges?chargeStatus&#x3D;all  savingsaccounts/1/charges?chargeStatus&#x3D;inactive  savingsaccounts/1/charges?chargeStatus&#x3D;active  savingsaccounts/1/charges?fields&#x3D;name,amountOrPercentage
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public retrieveAllSavingsAccountCharges(requestParameters: RetrieveAllSavingsAccountChargesRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<Array<GetSavingsAccountsSavingsAccountIdChargesResponse>>;
    public retrieveAllSavingsAccountCharges(requestParameters: RetrieveAllSavingsAccountChargesRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<Array<GetSavingsAccountsSavingsAccountIdChargesResponse>>>;
    public retrieveAllSavingsAccountCharges(requestParameters: RetrieveAllSavingsAccountChargesRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<Array<GetSavingsAccountsSavingsAccountIdChargesResponse>>>;
    public retrieveAllSavingsAccountCharges(requestParameters: RetrieveAllSavingsAccountChargesRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const savingsAccountId = requestParameters?.savingsAccountId;
        if (savingsAccountId === null || savingsAccountId === undefined) {
            throw new Error('Required parameter savingsAccountId was null or undefined when calling retrieveAllSavingsAccountCharges.');
        }
        const chargeStatus = requestParameters?.chargeStatus;

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>chargeStatus, 'chargeStatus');

        let localVarHeaders = this.defaultHeaders;

        // authentication (basicAuth) required
        localVarHeaders = this.configuration.addCredentialToHeaders('basicAuth', 'Authorization', localVarHeaders, 'Basic ');

        // authentication (tenantid) required
        localVarHeaders = this.configuration.addCredentialToHeaders('tenantid', 'fineract-platform-tenantid', localVarHeaders);

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/v1/savingsaccounts/${this.configuration.encodeParam({name: "savingsAccountId", value: savingsAccountId, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: "int64"})}/charges`;
        const { basePath, withCredentials } = this.configuration;
        return this.httpClient.request<Array<GetSavingsAccountsSavingsAccountIdChargesResponse>>('get', `${basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                ...(withCredentials ? { withCredentials } : {}),
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Retrieve a Savings account Charge
     * Retrieves a Savings account Charge  Example Requests:  /savingsaccounts/1/charges/5   /savingsaccounts/1/charges/5?fields&#x3D;name,amountOrPercentage
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public retrieveSavingsAccountCharge(requestParameters: RetrieveSavingsAccountChargeRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<GetSavingsAccountsSavingsAccountIdChargesSavingsAccountChargeIdResponse>;
    public retrieveSavingsAccountCharge(requestParameters: RetrieveSavingsAccountChargeRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<GetSavingsAccountsSavingsAccountIdChargesSavingsAccountChargeIdResponse>>;
    public retrieveSavingsAccountCharge(requestParameters: RetrieveSavingsAccountChargeRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<GetSavingsAccountsSavingsAccountIdChargesSavingsAccountChargeIdResponse>>;
    public retrieveSavingsAccountCharge(requestParameters: RetrieveSavingsAccountChargeRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const savingsAccountId = requestParameters?.savingsAccountId;
        if (savingsAccountId === null || savingsAccountId === undefined) {
            throw new Error('Required parameter savingsAccountId was null or undefined when calling retrieveSavingsAccountCharge.');
        }
        const savingsAccountChargeId = requestParameters?.savingsAccountChargeId;
        if (savingsAccountChargeId === null || savingsAccountChargeId === undefined) {
            throw new Error('Required parameter savingsAccountChargeId was null or undefined when calling retrieveSavingsAccountCharge.');
        }

        let localVarHeaders = this.defaultHeaders;

        // authentication (basicAuth) required
        localVarHeaders = this.configuration.addCredentialToHeaders('basicAuth', 'Authorization', localVarHeaders, 'Basic ');

        // authentication (tenantid) required
        localVarHeaders = this.configuration.addCredentialToHeaders('tenantid', 'fineract-platform-tenantid', localVarHeaders);

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/v1/savingsaccounts/${this.configuration.encodeParam({name: "savingsAccountId", value: savingsAccountId, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: "int64"})}/charges/${this.configuration.encodeParam({name: "savingsAccountChargeId", value: savingsAccountChargeId, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: "int64"})}`;
        const { basePath, withCredentials } = this.configuration;
        return this.httpClient.request<GetSavingsAccountsSavingsAccountIdChargesSavingsAccountChargeIdResponse>('get', `${basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                ...(withCredentials ? { withCredentials } : {}),
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Retrieve Savings Charges Template
     * This is a convenience resource. It can be useful when building maintenance user interface screens for client applications. The template data returned consists of any or all of:  Field Defaults Allowed description Lists Example Request:  savingsaccounts/1/charges/template
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public retrieveTemplate18(requestParameters: RetrieveTemplate18RequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<GetSavingsAccountsSavingsAccountIdChargesTemplateResponse>;
    public retrieveTemplate18(requestParameters: RetrieveTemplate18RequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<GetSavingsAccountsSavingsAccountIdChargesTemplateResponse>>;
    public retrieveTemplate18(requestParameters: RetrieveTemplate18RequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<GetSavingsAccountsSavingsAccountIdChargesTemplateResponse>>;
    public retrieveTemplate18(requestParameters: RetrieveTemplate18RequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const savingsAccountId = requestParameters?.savingsAccountId;
        if (savingsAccountId === null || savingsAccountId === undefined) {
            throw new Error('Required parameter savingsAccountId was null or undefined when calling retrieveTemplate18.');
        }

        let localVarHeaders = this.defaultHeaders;

        // authentication (basicAuth) required
        localVarHeaders = this.configuration.addCredentialToHeaders('basicAuth', 'Authorization', localVarHeaders, 'Basic ');

        // authentication (tenantid) required
        localVarHeaders = this.configuration.addCredentialToHeaders('tenantid', 'fineract-platform-tenantid', localVarHeaders);

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/v1/savingsaccounts/${this.configuration.encodeParam({name: "savingsAccountId", value: savingsAccountId, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: "int64"})}/charges/template`;
        const { basePath, withCredentials } = this.configuration;
        return this.httpClient.request<GetSavingsAccountsSavingsAccountIdChargesTemplateResponse>('get', `${basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                ...(withCredentials ? { withCredentials } : {}),
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update a Savings account Charge
     * Currently Savings account Charges may be updated only if the Savings account is not yet approved.
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateSavingsAccountCharge(requestParameters: UpdateSavingsAccountChargeRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<PutSavingsAccountsSavingsAccountIdChargesSavingsAccountChargeIdResponse>;
    public updateSavingsAccountCharge(requestParameters: UpdateSavingsAccountChargeRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<PutSavingsAccountsSavingsAccountIdChargesSavingsAccountChargeIdResponse>>;
    public updateSavingsAccountCharge(requestParameters: UpdateSavingsAccountChargeRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<PutSavingsAccountsSavingsAccountIdChargesSavingsAccountChargeIdResponse>>;
    public updateSavingsAccountCharge(requestParameters: UpdateSavingsAccountChargeRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const savingsAccountId = requestParameters?.savingsAccountId;
        if (savingsAccountId === null || savingsAccountId === undefined) {
            throw new Error('Required parameter savingsAccountId was null or undefined when calling updateSavingsAccountCharge.');
        }
        const savingsAccountChargeId = requestParameters?.savingsAccountChargeId;
        if (savingsAccountChargeId === null || savingsAccountChargeId === undefined) {
            throw new Error('Required parameter savingsAccountChargeId was null or undefined when calling updateSavingsAccountCharge.');
        }
        const putSavingsAccountsSavingsAccountIdChargesSavingsAccountChargeIdRequest = requestParameters?.putSavingsAccountsSavingsAccountIdChargesSavingsAccountChargeIdRequest;
        if (putSavingsAccountsSavingsAccountIdChargesSavingsAccountChargeIdRequest === null || putSavingsAccountsSavingsAccountIdChargesSavingsAccountChargeIdRequest === undefined) {
            throw new Error('Required parameter putSavingsAccountsSavingsAccountIdChargesSavingsAccountChargeIdRequest was null or undefined when calling updateSavingsAccountCharge.');
        }

        let localVarHeaders = this.defaultHeaders;

        // authentication (basicAuth) required
        localVarHeaders = this.configuration.addCredentialToHeaders('basicAuth', 'Authorization', localVarHeaders, 'Basic ');

        // authentication (tenantid) required
        localVarHeaders = this.configuration.addCredentialToHeaders('tenantid', 'fineract-platform-tenantid', localVarHeaders);

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/v1/savingsaccounts/${this.configuration.encodeParam({name: "savingsAccountId", value: savingsAccountId, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: "int64"})}/charges/${this.configuration.encodeParam({name: "savingsAccountChargeId", value: savingsAccountChargeId, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: "int64"})}`;
        const { basePath, withCredentials } = this.configuration;
        return this.httpClient.request<PutSavingsAccountsSavingsAccountIdChargesSavingsAccountChargeIdResponse>('put', `${basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: putSavingsAccountsSavingsAccountIdChargesSavingsAccountChargeIdRequest,
                responseType: <any>responseType_,
                ...(withCredentials ? { withCredentials } : {}),
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

}
