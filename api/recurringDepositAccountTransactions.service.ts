/**
 * Apache Fineract REST API
 *
 * Contact: dev@fineract.apache.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext 
        }       from '@angular/common/http';
import { CustomHttpParameterCodec }                          from '../encoder';
import { Observable }                                        from 'rxjs';

// @ts-ignore
import { GetRecurringDepositAccountsRecurringDepositAccountIdTransactionsTemplateResponse } from '../model/getRecurringDepositAccountsRecurringDepositAccountIdTransactionsTemplateResponse';
// @ts-ignore
import { GetRecurringDepositAccountsRecurringDepositAccountIdTransactionsTransactionIdResponse } from '../model/getRecurringDepositAccountsRecurringDepositAccountIdTransactionsTransactionIdResponse';
// @ts-ignore
import { PostRecurringDepositAccountsRecurringDepositAccountIdTransactionsRequest } from '../model/postRecurringDepositAccountsRecurringDepositAccountIdTransactionsRequest';
// @ts-ignore
import { PostRecurringDepositAccountsRecurringDepositAccountIdTransactionsResponse } from '../model/postRecurringDepositAccountsRecurringDepositAccountIdTransactionsResponse';
// @ts-ignore
import { PostRecurringDepositAccountsRecurringDepositAccountIdTransactionsTransactionIdResponse } from '../model/postRecurringDepositAccountsRecurringDepositAccountIdTransactionsTransactionIdResponse';

// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';
import { BaseService } from '../api.base.service';


export interface HandleTransactionCommandsRequestParams {
    /** recurringDepositAccountId */
    recurringDepositAccountId: number;
    /** transactionId */
    transactionId: number;
    postRecurringDepositAccountsRecurringDepositAccountIdTransactionsRequest: PostRecurringDepositAccountsRecurringDepositAccountIdTransactionsRequest;
    /** command */
    command?: string;
}

export interface RetrieveOne21RequestParams {
    /** recurringDepositAccountId */
    recurringDepositAccountId: number;
    /** transactionId */
    transactionId: number;
}

export interface RetrieveTemplate16RequestParams {
    /** recurringDepositAccountId */
    recurringDepositAccountId: number;
    /** command */
    command?: string;
}

export interface Transaction1RequestParams {
    /** recurringDepositAccountId */
    recurringDepositAccountId: number;
    postRecurringDepositAccountsRecurringDepositAccountIdTransactionsRequest: PostRecurringDepositAccountsRecurringDepositAccountIdTransactionsRequest;
    /** command */
    command?: string;
}


@Injectable({
  providedIn: 'root'
})
export class RecurringDepositAccountTransactionsService extends BaseService {

    constructor(protected httpClient: HttpClient, @Optional() @Inject(BASE_PATH) basePath: string|string[], @Optional() configuration?: Configuration) {
        super(basePath, configuration);
    }

    /**
     * Adjust Transaction | Undo transaction
     * Adjust Transaction:  This command modifies the given transaction.  Undo transaction:  This command reverses the given transaction.  Showing request/response for \&#39;Adjust Transaction\&#39;
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public handleTransactionCommands(requestParameters: HandleTransactionCommandsRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<PostRecurringDepositAccountsRecurringDepositAccountIdTransactionsTransactionIdResponse>;
    public handleTransactionCommands(requestParameters: HandleTransactionCommandsRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<PostRecurringDepositAccountsRecurringDepositAccountIdTransactionsTransactionIdResponse>>;
    public handleTransactionCommands(requestParameters: HandleTransactionCommandsRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<PostRecurringDepositAccountsRecurringDepositAccountIdTransactionsTransactionIdResponse>>;
    public handleTransactionCommands(requestParameters: HandleTransactionCommandsRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const recurringDepositAccountId = requestParameters?.recurringDepositAccountId;
        if (recurringDepositAccountId === null || recurringDepositAccountId === undefined) {
            throw new Error('Required parameter recurringDepositAccountId was null or undefined when calling handleTransactionCommands.');
        }
        const transactionId = requestParameters?.transactionId;
        if (transactionId === null || transactionId === undefined) {
            throw new Error('Required parameter transactionId was null or undefined when calling handleTransactionCommands.');
        }
        const postRecurringDepositAccountsRecurringDepositAccountIdTransactionsRequest = requestParameters?.postRecurringDepositAccountsRecurringDepositAccountIdTransactionsRequest;
        if (postRecurringDepositAccountsRecurringDepositAccountIdTransactionsRequest === null || postRecurringDepositAccountsRecurringDepositAccountIdTransactionsRequest === undefined) {
            throw new Error('Required parameter postRecurringDepositAccountsRecurringDepositAccountIdTransactionsRequest was null or undefined when calling handleTransactionCommands.');
        }
        const command = requestParameters?.command;

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>command, 'command');

        let localVarHeaders = this.defaultHeaders;

        // authentication (basicAuth) required
        localVarHeaders = this.configuration.addCredentialToHeaders('basicAuth', 'Authorization', localVarHeaders, 'Basic ');

        // authentication (tenantid) required
        localVarHeaders = this.configuration.addCredentialToHeaders('tenantid', 'fineract-platform-tenantid', localVarHeaders);

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/v1/recurringdepositaccounts/${this.configuration.encodeParam({name: "recurringDepositAccountId", value: recurringDepositAccountId, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: "int64"})}/transactions/${this.configuration.encodeParam({name: "transactionId", value: transactionId, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: "int64"})}`;
        const { basePath, withCredentials } = this.configuration;
        return this.httpClient.request<PostRecurringDepositAccountsRecurringDepositAccountIdTransactionsTransactionIdResponse>('post', `${basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: postRecurringDepositAccountsRecurringDepositAccountIdTransactionsRequest,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                ...(withCredentials ? { withCredentials } : {}),
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Retrieve Recurring Deposit Account Transaction
     * Retrieves Recurring Deposit Account Transaction  Example Requests:  recurringdepositaccounts/1/transactions/1
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public retrieveOne21(requestParameters: RetrieveOne21RequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<GetRecurringDepositAccountsRecurringDepositAccountIdTransactionsTransactionIdResponse>;
    public retrieveOne21(requestParameters: RetrieveOne21RequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<GetRecurringDepositAccountsRecurringDepositAccountIdTransactionsTransactionIdResponse>>;
    public retrieveOne21(requestParameters: RetrieveOne21RequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<GetRecurringDepositAccountsRecurringDepositAccountIdTransactionsTransactionIdResponse>>;
    public retrieveOne21(requestParameters: RetrieveOne21RequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const recurringDepositAccountId = requestParameters?.recurringDepositAccountId;
        if (recurringDepositAccountId === null || recurringDepositAccountId === undefined) {
            throw new Error('Required parameter recurringDepositAccountId was null or undefined when calling retrieveOne21.');
        }
        const transactionId = requestParameters?.transactionId;
        if (transactionId === null || transactionId === undefined) {
            throw new Error('Required parameter transactionId was null or undefined when calling retrieveOne21.');
        }

        let localVarHeaders = this.defaultHeaders;

        // authentication (basicAuth) required
        localVarHeaders = this.configuration.addCredentialToHeaders('basicAuth', 'Authorization', localVarHeaders, 'Basic ');

        // authentication (tenantid) required
        localVarHeaders = this.configuration.addCredentialToHeaders('tenantid', 'fineract-platform-tenantid', localVarHeaders);

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/v1/recurringdepositaccounts/${this.configuration.encodeParam({name: "recurringDepositAccountId", value: recurringDepositAccountId, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: "int64"})}/transactions/${this.configuration.encodeParam({name: "transactionId", value: transactionId, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: "int64"})}`;
        const { basePath, withCredentials } = this.configuration;
        return this.httpClient.request<GetRecurringDepositAccountsRecurringDepositAccountIdTransactionsTransactionIdResponse>('get', `${basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                ...(withCredentials ? { withCredentials } : {}),
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Retrieve Recurring Deposit Account Transaction Template
     * This is a convenience resource. It can be useful when building maintenance user interface screens for client applications. The template data returned consists of any or all of:  Field Defaults Allowed Value Lists Example Requests:  recurringdepositaccounts/1/transactions/template?command&#x3D;deposit  recurringdepositaccounts/1/transactions/template?command&#x3D;withdrawal
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public retrieveTemplate16(requestParameters: RetrieveTemplate16RequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<GetRecurringDepositAccountsRecurringDepositAccountIdTransactionsTemplateResponse>;
    public retrieveTemplate16(requestParameters: RetrieveTemplate16RequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<GetRecurringDepositAccountsRecurringDepositAccountIdTransactionsTemplateResponse>>;
    public retrieveTemplate16(requestParameters: RetrieveTemplate16RequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<GetRecurringDepositAccountsRecurringDepositAccountIdTransactionsTemplateResponse>>;
    public retrieveTemplate16(requestParameters: RetrieveTemplate16RequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const recurringDepositAccountId = requestParameters?.recurringDepositAccountId;
        if (recurringDepositAccountId === null || recurringDepositAccountId === undefined) {
            throw new Error('Required parameter recurringDepositAccountId was null or undefined when calling retrieveTemplate16.');
        }
        const command = requestParameters?.command;

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>command, 'command');

        let localVarHeaders = this.defaultHeaders;

        // authentication (basicAuth) required
        localVarHeaders = this.configuration.addCredentialToHeaders('basicAuth', 'Authorization', localVarHeaders, 'Basic ');

        // authentication (tenantid) required
        localVarHeaders = this.configuration.addCredentialToHeaders('tenantid', 'fineract-platform-tenantid', localVarHeaders);

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/v1/recurringdepositaccounts/${this.configuration.encodeParam({name: "recurringDepositAccountId", value: recurringDepositAccountId, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: "int64"})}/transactions/template`;
        const { basePath, withCredentials } = this.configuration;
        return this.httpClient.request<GetRecurringDepositAccountsRecurringDepositAccountIdTransactionsTemplateResponse>('get', `${basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                ...(withCredentials ? { withCredentials } : {}),
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Deposit Transaction | Withdrawal Transaction
     * Deposit Transaction:  Used for a deposit transaction  Withdrawal Transaction:  Used for a Withdrawal Transaction  Showing request/response for Deposit Transaction
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public transaction1(requestParameters: Transaction1RequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<PostRecurringDepositAccountsRecurringDepositAccountIdTransactionsResponse>;
    public transaction1(requestParameters: Transaction1RequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<PostRecurringDepositAccountsRecurringDepositAccountIdTransactionsResponse>>;
    public transaction1(requestParameters: Transaction1RequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<PostRecurringDepositAccountsRecurringDepositAccountIdTransactionsResponse>>;
    public transaction1(requestParameters: Transaction1RequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const recurringDepositAccountId = requestParameters?.recurringDepositAccountId;
        if (recurringDepositAccountId === null || recurringDepositAccountId === undefined) {
            throw new Error('Required parameter recurringDepositAccountId was null or undefined when calling transaction1.');
        }
        const postRecurringDepositAccountsRecurringDepositAccountIdTransactionsRequest = requestParameters?.postRecurringDepositAccountsRecurringDepositAccountIdTransactionsRequest;
        if (postRecurringDepositAccountsRecurringDepositAccountIdTransactionsRequest === null || postRecurringDepositAccountsRecurringDepositAccountIdTransactionsRequest === undefined) {
            throw new Error('Required parameter postRecurringDepositAccountsRecurringDepositAccountIdTransactionsRequest was null or undefined when calling transaction1.');
        }
        const command = requestParameters?.command;

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>command, 'command');

        let localVarHeaders = this.defaultHeaders;

        // authentication (basicAuth) required
        localVarHeaders = this.configuration.addCredentialToHeaders('basicAuth', 'Authorization', localVarHeaders, 'Basic ');

        // authentication (tenantid) required
        localVarHeaders = this.configuration.addCredentialToHeaders('tenantid', 'fineract-platform-tenantid', localVarHeaders);

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/v1/recurringdepositaccounts/${this.configuration.encodeParam({name: "recurringDepositAccountId", value: recurringDepositAccountId, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: "int64"})}/transactions`;
        const { basePath, withCredentials } = this.configuration;
        return this.httpClient.request<PostRecurringDepositAccountsRecurringDepositAccountIdTransactionsResponse>('post', `${basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: postRecurringDepositAccountsRecurringDepositAccountIdTransactionsRequest,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                ...(withCredentials ? { withCredentials } : {}),
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

}
