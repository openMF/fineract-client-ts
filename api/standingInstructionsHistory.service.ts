/**
 * Apache Fineract REST API
 *
 * Contact: dev@fineract.apache.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext 
        }       from '@angular/common/http';
import { CustomHttpParameterCodec }                          from '../encoder';
import { Observable }                                        from 'rxjs';

// @ts-ignore
import { GetStandingInstructionRunHistoryResponse } from '../model/getStandingInstructionRunHistoryResponse';

// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';
import { BaseService } from '../api.base.service';


export interface RetrieveAll20RequestParams {
    /** externalId */
    externalId?: string;
    /** offset */
    offset?: number;
    /** limit */
    limit?: number;
    /** orderBy */
    orderBy?: string;
    /** sortOrder */
    sortOrder?: string;
    /** transferType */
    transferType?: number;
    /** clientName */
    clientName?: string;
    /** clientId */
    clientId?: number;
    /** fromAccountId */
    fromAccountId?: number;
    /** fromAccountType */
    fromAccountType?: number;
    /** locale */
    locale?: string;
    /** dateFormat */
    dateFormat?: string;
    /** fromDate */
    fromDate?: object;
    /** toDate */
    toDate?: object;
}


@Injectable({
  providedIn: 'root'
})
export class StandingInstructionsHistoryService extends BaseService {

    constructor(protected httpClient: HttpClient, @Optional() @Inject(BASE_PATH) basePath: string|string[], @Optional() configuration?: Configuration) {
        super(basePath, configuration);
    }

    /**
     * Standing Instructions Logged History
     * The list capability of history can support pagination and sorting   Example Requests :  standinginstructionrunhistory  standinginstructionrunhistory?orderBy&#x3D;name&amp;sortOrder&#x3D;DESC  standinginstructionrunhistory?offset&#x3D;10&amp;limit&#x3D;50
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public retrieveAll20(requestParameters?: RetrieveAll20RequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<GetStandingInstructionRunHistoryResponse>;
    public retrieveAll20(requestParameters?: RetrieveAll20RequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<GetStandingInstructionRunHistoryResponse>>;
    public retrieveAll20(requestParameters?: RetrieveAll20RequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<GetStandingInstructionRunHistoryResponse>>;
    public retrieveAll20(requestParameters?: RetrieveAll20RequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const externalId = requestParameters?.externalId;
        const offset = requestParameters?.offset;
        const limit = requestParameters?.limit;
        const orderBy = requestParameters?.orderBy;
        const sortOrder = requestParameters?.sortOrder;
        const transferType = requestParameters?.transferType;
        const clientName = requestParameters?.clientName;
        const clientId = requestParameters?.clientId;
        const fromAccountId = requestParameters?.fromAccountId;
        const fromAccountType = requestParameters?.fromAccountType;
        const locale = requestParameters?.locale;
        const dateFormat = requestParameters?.dateFormat;
        const fromDate = requestParameters?.fromDate;
        const toDate = requestParameters?.toDate;

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>externalId, 'externalId');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>offset, 'offset');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>limit, 'limit');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>orderBy, 'orderBy');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>sortOrder, 'sortOrder');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>transferType, 'transferType');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>clientName, 'clientName');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>clientId, 'clientId');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>fromAccountId, 'fromAccountId');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>fromAccountType, 'fromAccountType');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>locale, 'locale');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>dateFormat, 'dateFormat');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>fromDate, 'fromDate');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>toDate, 'toDate');

        let localVarHeaders = this.defaultHeaders;

        // authentication (basicAuth) required
        localVarHeaders = this.configuration.addCredentialToHeaders('basicAuth', 'Authorization', localVarHeaders, 'Basic ');

        // authentication (tenantid) required
        localVarHeaders = this.configuration.addCredentialToHeaders('tenantid', 'fineract-platform-tenantid', localVarHeaders);

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/v1/standinginstructionrunhistory`;
        const { basePath, withCredentials } = this.configuration;
        return this.httpClient.request<GetStandingInstructionRunHistoryResponse>('get', `${basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                ...(withCredentials ? { withCredentials } : {}),
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

}
